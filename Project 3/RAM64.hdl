// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel[0]=address[3], sel[1]=address[4], sel[2]=address[5],
             a=loadDmuxA,
             b=loadDmuxB,
             c=loadDmuxC,
             d=loadDmuxD,
             e=loadDmuxE,
             f=loadDmuxF,
             g=loadDmuxG,
             h=loadDmuxH);
   RAM8(in=in, load=loadDmuxA, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram1);
   RAM8(in=in, load=loadDmuxB, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram2);
   RAM8(in=in, load=loadDmuxC, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram3);
   RAM8(in=in, load=loadDmuxD, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram4);
   RAM8(in=in, load=loadDmuxE, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram5);
   RAM8(in=in, load=loadDmuxF, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram6);
   RAM8(in=in, load=loadDmuxG, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram7);
   RAM8(in=in, load=loadDmuxH, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=ram8);
   Mux8Way16(a=ram1,b=ram2,c=ram3,d=ram4,e=ram5,f=ram6,g=ram7,h=ram8,
             sel[0]=address[3],sel[1]=address[4],sel[2]=address[5],out=out);


}
